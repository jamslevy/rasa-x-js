/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse2009 from '../model/InlineResponse2009';
import InlineResponse401 from '../model/InlineResponse401';
import TemplateResponse from '../model/TemplateResponse';

/**
* Templates service.
* @module api/TemplatesApi
* @version 1.0.0
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTemplates operation.
     * @callback module:api/TemplatesApi~getTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bot response templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Template text search string
     * @param {String} opts.template Templates to filter on (comma-separated)
     * @param {Number} opts.limit Limit number of responses to return
     * @param {Number} opts.offset Offset to consider in window of responses returned (default to 0)
     * @param {module:api/TemplatesApi~getTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    getTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'template': opts['template'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyTemplate operation.
     * @callback module:api/TemplatesApi~modifyTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify response template
     * @param {String} templateId Template ID
     * @param {module:model/TemplateResponse} templateResponse 
     * @param {module:api/TemplatesApi~modifyTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    modifyTemplate(templateId, templateResponse, callback) {
      let postBody = templateResponse;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling modifyTemplate");
      }
      // verify the required parameter 'templateResponse' is set
      if (templateResponse === undefined || templateResponse === null) {
        throw new Error("Missing the required parameter 'templateResponse' when calling modifyTemplate");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/templates/{template_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTemplate operation.
     * @callback module:api/TemplatesApi~postTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to templates collection
     * @param {module:model/TemplateResponse} templateResponse 
     * @param {module:api/TemplatesApi~postTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    postTemplate(templateResponse, callback) {
      let postBody = templateResponse;
      // verify the required parameter 'templateResponse' is set
      if (templateResponse === undefined || templateResponse === null) {
        throw new Error("Missing the required parameter 'templateResponse' when calling postTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateResponse;
      return this.apiClient.callApi(
        '/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
