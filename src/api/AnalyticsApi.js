/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalyticsResult from '../model/AnalyticsResult';
import InlineResponse404 from '../model/InlineResponse404';

/**
* Analytics service.
* @module api/AnalyticsApi
* @version 1.0.0
*/
export default class AnalyticsApi {

    /**
    * Constructs a new AnalyticsApi. 
    * @alias module:api/AnalyticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userAnalytics operation.
     * @callback module:api/AnalyticsApi~userAnalyticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalyticsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch analytics
     * @param {String} start Start time. Accepts ISO-8601 format (as in the example) or Unix time.
     * @param {String} end End time. Accepts ISO-8601 format (as in the example) or Unix time.
     * @param {String} window Bin size used in the accumulation of the requested analytics result. If not specified, 10 bins are returned by default. Multiple formats are supported. A full list is available at https://pypi.org/project/pytimeparse/1.1.8/.
     * @param {module:api/AnalyticsApi~userAnalyticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalyticsResult}
     */
    userAnalytics(start, end, window, callback) {
      let postBody = null;
      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling userAnalytics");
      }
      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling userAnalytics");
      }
      // verify the required parameter 'window' is set
      if (window === undefined || window === null) {
        throw new Error("Missing the required parameter 'window' when calling userAnalytics");
      }

      let pathParams = {
        'start': start,
        'end': end,
        'window': window
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalyticsResult;
      return this.apiClient.callApi(
        '/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
