/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Conversation from '../model/Conversation';
import ConversationMetadata from '../model/ConversationMetadata';
import Event from '../model/Event';
import InlineObject4 from '../model/InlineObject4';
import InlineObject9 from '../model/InlineObject9';
import Message from '../model/Message';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 1.0.0
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the correctMessage operation.
     * @callback module:api/ConversationsApi~correctMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Correct message intent
     * Corrects the intent of the message and possible adds it to the training data
     * @param {String} conversationId Sender ID
     * @param {Number} messageTimestamp 
     * @param {String} projectId Project ID
     * @param {module:model/InlineObject4} inlineObject4 
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {module:api/ConversationsApi~correctMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    correctMessage(conversationId, messageTimestamp, projectId, inlineObject4, opts, callback) {
      opts = opts || {};
      let postBody = inlineObject4;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling correctMessage");
      }
      // verify the required parameter 'messageTimestamp' is set
      if (messageTimestamp === undefined || messageTimestamp === null) {
        throw new Error("Missing the required parameter 'messageTimestamp' when calling correctMessage");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling correctMessage");
      }
      // verify the required parameter 'inlineObject4' is set
      if (inlineObject4 === undefined || inlineObject4 === null) {
        throw new Error("Missing the required parameter 'inlineObject4' when calling correctMessage");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'message_timestamp': messageTimestamp,
        'project_id': projectId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages/{message_timestamp}/intent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlagFromConversation operation.
     * @callback module:api/ConversationsApi~deleteFlagFromConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a flag from a message
     * @param {String} conversationId Sender ID
     * @param {Number} messageTimestamp 
     * @param {module:api/ConversationsApi~deleteFlagFromConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFlagFromConversation(conversationId, messageTimestamp, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling deleteFlagFromConversation");
      }
      // verify the required parameter 'messageTimestamp' is set
      if (messageTimestamp === undefined || messageTimestamp === null) {
        throw new Error("Missing the required parameter 'messageTimestamp' when calling deleteFlagFromConversation");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'message_timestamp': messageTimestamp
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages/{message_timestamp}/flag', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDebugDumpJson operation.
     * @callback module:api/ConversationsApi~downloadDebugDumpJsonCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download debug dump in JSON format
     * @param {String} conversationId Sender ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.until Upper bound of timestamp for data to be dumped
     * @param {Boolean} opts.useHistory Whether to include data before the last reset
     * @param {module:api/ConversationsApi~downloadDebugDumpJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    downloadDebugDumpJson(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling downloadDebugDumpJson");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'until': opts['until'],
        'use_history': opts['useHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/debug-dump.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDebugDumpMarkdown operation.
     * @callback module:api/ConversationsApi~downloadDebugDumpMarkdownCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download debug dump in Markdown format
     * @param {String} conversationId Sender ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.until Upper bound of timestamp for data to be dumped
     * @param {Boolean} opts.useHistory Whether to include data before the last reset
     * @param {module:api/ConversationsApi~downloadDebugDumpMarkdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    downloadDebugDumpMarkdown(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling downloadDebugDumpMarkdown");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'until': opts['until'],
        'use_history': opts['useHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/debug-dump.md', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flagMessage operation.
     * @callback module:api/ConversationsApi~flagMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flags this message
     * @param {String} conversationId Sender ID
     * @param {Number} messageTimestamp 
     * @param {module:api/ConversationsApi~flagMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flagMessage(conversationId, messageTimestamp, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling flagMessage");
      }
      // verify the required parameter 'messageTimestamp' is set
      if (messageTimestamp === undefined || messageTimestamp === null) {
        throw new Error("Missing the required parameter 'messageTimestamp' when calling flagMessage");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'message_timestamp': messageTimestamp
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages/{message_timestamp}/flag', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversation operation.
     * @callback module:api/ConversationsApi~getConversationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch tracker for a conversation id
     * @param {String} conversationId Sender ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {module:api/ConversationsApi~getConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    getConversation(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getConversation");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversations operation.
     * @callback module:api/ConversationsApi~getConversationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch list of conversations
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {String} opts.intent Comma-separated intents to filter on (default to 'null')
     * @param {String} opts.entity Comma-separated entities to filter on (default to 'null')
     * @param {String} opts.action Comma-separated actions to filter on (default to 'null')
     * @param {String} opts.text User utterance text to filter on (default to 'null')
     * @param {Number} opts.start Minimum timestamp of latest user event
     * @param {Number} opts.until Maximum timestamp of latest user event
     * @param {String} opts.policies Comma-separated list of policies used for prediction (default to 'null')
     * @param {Number} opts.maximumConfidence Maximum value of the minimum action confidence
     * @param {Number} opts.minimumUserMessages Minimum number of user messages per conversation
     * @param {Boolean} opts.inTrainingData Only show conversations that appear in the training data. If false, only show conversations not appearing in training data . If unset, show all conversations.
     * @param {Boolean} opts.sortByConfidence Sort conversations that are not found in the training data by their minimum action confidence from high to low. Has no effect if `in_training_data` is anything other than false. (default to true)
     * @param {Boolean} opts.sortByLatestEventTime Sort conversations by their latest activity from most recent to least recent. (default to true)
     * @param {Boolean} opts.isFlagged Filter for conversations which contain flagged messages. (default to false)
     * @param {Boolean} opts.excludeSelf Exclude currently authenticated user from conversations. (default to false)
     * @param {module:api/ConversationsApi~getConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationMetadata>}
     */
    getConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'environment': opts['environment'],
        'intent': opts['intent'],
        'entity': opts['entity'],
        'action': opts['action'],
        'text': opts['text'],
        'start': opts['start'],
        'until': opts['until'],
        'policies': opts['policies'],
        'maximumConfidence': opts['maximumConfidence'],
        'minimumUserMessages': opts['minimumUserMessages'],
        'in_training_data': opts['inTrainingData'],
        'sort_by_confidence': opts['sortByConfidence'],
        'sort_by_latest_event_time': opts['sortByLatestEventTime'],
        'is_flagged': opts['isFlagged'],
        'exclude_self': opts['excludeSelf']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConversationMetadata];
      return this.apiClient.callApi(
        '/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEvents operation.
     * @callback module:api/ConversationsApi~getEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch events in conversation with conversation
     * @param {String} conversationId Sender ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {Number} opts.until Upper bound of timestamp for data to be dumped
     * @param {Boolean} opts.useHistory Whether to include data before the last reset
     * @param {module:api/ConversationsApi~getEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getEvents(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getEvents");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'environment': opts['environment'],
        'until': opts['until'],
        'use_history': opts['useHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/ConversationsApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch messages in conversation
     * @param {String} conversationId Sender ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {Number} opts.until Upper bound of timestamp for data to be dumped
     * @param {Boolean} opts.useHistory Whether to include data before the last reset
     * @param {module:api/ConversationsApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    getMessages(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getMessages");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'environment': opts['environment'],
        'until': opts['until'],
        'use_history': opts['useHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniqueActions operation.
     * @callback module:api/ConversationsApi~getUniqueActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of unique actions from all conversations
     * @param {module:api/ConversationsApi~getUniqueActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getUniqueActions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/conversationActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniqueEntities operation.
     * @callback module:api/ConversationsApi~getUniqueEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of unique entities from all conversations
     * @param {module:api/ConversationsApi~getUniqueEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getUniqueEntities(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/conversationEntities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniqueIntents operation.
     * @callback module:api/ConversationsApi~getUniqueIntentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of unique intents from all conversations
     * @param {module:api/ConversationsApi~getUniqueIntentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getUniqueIntents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/conversationIntents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniquePolicies operation.
     * @callback module:api/ConversationsApi~getUniquePoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of unique Rasa Core policies in all conversations
     * @param {module:api/ConversationsApi~getUniquePoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getUniquePolicies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/conversationPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChat operation.
     * @callback module:api/ConversationsApi~putChatCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to have a conversation with the assistant
     * @param {module:model/InlineObject9} inlineObject9 
     * @param {module:api/ConversationsApi~putChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    putChat(inlineObject9, callback) {
      let postBody = inlineObject9;
      // verify the required parameter 'inlineObject9' is set
      if (inlineObject9 === undefined || inlineObject9 === null) {
        throw new Error("Missing the required parameter 'inlineObject9' when calling putChat");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/chat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMessageCorrection operation.
     * @callback module:api/ConversationsApi~removeMessageCorrectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Undoes the correction of message
     * @param {String} conversationId Sender ID
     * @param {Number} messageTimestamp 
     * @param {String} projectId Project ID
     * @param {module:api/ConversationsApi~removeMessageCorrectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeMessageCorrection(conversationId, messageTimestamp, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling removeMessageCorrection");
      }
      // verify the required parameter 'messageTimestamp' is set
      if (messageTimestamp === undefined || messageTimestamp === null) {
        throw new Error("Missing the required parameter 'messageTimestamp' when calling removeMessageCorrection");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling removeMessageCorrection");
      }

      let pathParams = {
        'conversation_id': conversationId,
        'message_timestamp': messageTimestamp,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages/{message_timestamp}/intent', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/ConversationsApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a message to a conversation
     * @param {String} conversationId Sender ID
     * @param {module:model/Message} message 
     * @param {Object} opts Optional parameters
     * @param {String} opts.environment Deployment environment to be used in query
     * @param {module:api/ConversationsApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    sendMessage(conversationId, message, opts, callback) {
      opts = opts || {};
      let postBody = message;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling sendMessage");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling sendMessage");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'environment': opts['environment']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
