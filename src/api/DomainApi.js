/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';
import DomainWarnings from '../model/DomainWarnings';
import InlineResponse401 from '../model/InlineResponse401';

/**
* Domain service.
* @module api/DomainApi
* @version 1.0.0
*/
export default class DomainApi {

    /**
    * Constructs a new DomainApi. 
    * @alias module:api/DomainApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAction operation.
     * @callback module:api/DomainApi~createActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new action
     * @param {String} projectId Project ID
     * @param {module:model/Action} action 
     * @param {module:api/DomainApi~createActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    createAction(projectId, action, callback) {
      let postBody = action;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling createAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling createAction");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/projects/{project_id}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction operation.
     * @callback module:api/DomainApi~deleteActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete action
     * @param {String} projectId Project ID
     * @param {String} actionId Unique id of an action
     * @param {module:api/DomainApi~deleteActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAction(projectId, actionId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling deleteAction");
      }

      let pathParams = {
        'project_id': projectId,
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{project_id}/actions/{action_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomain operation.
     * @callback module:api/DomainApi~getDomainCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rasa domain
     * @param {module:api/DomainApi~getDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getDomain(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainActions operation.
     * @callback module:api/DomainApi~getDomainActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rasa domain actions
     * @param {String} projectId Project ID
     * @param {module:api/DomainApi~getDomainActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getDomainActions(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDomainActions");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/projects/{project_id}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainWarnings operation.
     * @callback module:api/DomainApi~getDomainWarningsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainWarnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Rasa domain warnings
     * @param {module:api/DomainApi~getDomainWarningsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainWarnings}
     */
    getDomainWarnings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainWarnings;
      return this.apiClient.callApi(
        '/domainWarnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/DomainApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update action
     * @param {String} projectId Project ID
     * @param {String} actionId Unique id of an action
     * @param {module:model/Action} action 
     * @param {module:api/DomainApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    updateAction(projectId, actionId, action, callback) {
      let postBody = action;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateAction");
      }
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling updateAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling updateAction");
      }

      let pathParams = {
        'project_id': projectId,
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/projects/{project_id}/actions/{action_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/DomainApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Rasa domain
     * @param {String} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.storeTemplates Specifies whether to store the templates from the uploaded domain. (default to false)
     * @param {module:api/DomainApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateDomain(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDomain");
      }

      let pathParams = {
      };
      let queryParams = {
        'store_templates': opts['storeTemplates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['text/plain'];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/domain', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
