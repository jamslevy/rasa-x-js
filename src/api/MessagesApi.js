/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import InlineObject5 from '../model/InlineObject5';
import InlineResponse2004 from '../model/InlineResponse2004';
import Suggestion from '../model/Suggestion';

/**
* Messages service.
* @module api/MessagesApi
* @version 1.0.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEvent operation.
     * @callback module:api/MessagesApi~createEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new event in the tracker of a conversation
     * @param {String} conversationId Sender ID
     * @param {module:model/Event} event 
     * @param {module:api/MessagesApi~createEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    createEvent(conversationId, event, callback) {
      let postBody = event;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling createEvent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling createEvent");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestions operation.
     * @callback module:api/MessagesApi~getSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suggestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get suggestions
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query string
     * @param {String} opts.intent Comma-separated intents to filter on (default to 'null')
     * @param {Number} opts.limit 
     * @param {Number} opts.offset  (default to 0)
     * @param {module:api/MessagesApi~getSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suggestion>}
     */
    getSuggestions(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSuggestions");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'q': opts['q'],
        'intent': opts['intent'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suggestion];
      return this.apiClient.callApi(
        '/projects/{project_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseText operation.
     * @callback module:api/MessagesApi~parseTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Suggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse text and create a new log entry
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query string
     * @param {module:api/MessagesApi~parseTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Suggestion}
     */
    parseText(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling parseText");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Suggestion;
      return this.apiClient.callApi(
        '/projects/{project_id}/logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runAction operation.
     * @callback module:api/MessagesApi~runActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an action in a conversation.
     * @param {String} conversationId Sender ID
     * @param {module:model/InlineObject5} inlineObject5 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.includeEvents  (default to 'ALL')
     * @param {module:api/MessagesApi~runActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    runAction(conversationId, inlineObject5, opts, callback) {
      opts = opts || {};
      let postBody = inlineObject5;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling runAction");
      }
      // verify the required parameter 'inlineObject5' is set
      if (inlineObject5 === undefined || inlineObject5 === null) {
        throw new Error("Missing the required parameter 'inlineObject5' when calling runAction");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
        'include_events': opts['includeEvents']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEvent operation.
     * @callback module:api/MessagesApi~updateEventCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update events in the tracker of a conversation
     * @param {String} conversationId Sender ID
     * @param {Array.<module:model/Event>} event 
     * @param {module:api/MessagesApi~updateEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    updateEvent(conversationId, event, callback) {
      let postBody = event;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling updateEvent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling updateEvent");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/events', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
