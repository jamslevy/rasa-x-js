/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataWarning from '../model/DataWarning';
import Entity from '../model/Entity';
import InlineObject6 from '../model/InlineObject6';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse401 from '../model/InlineResponse401';
import TrainingExample from '../model/TrainingExample';

/**
* NLUData service.
* @module api/NLUDataApi
* @version 1.0.0
*/
export default class NLUDataApi {

    /**
    * Constructs a new NLUDataApi. 
    * @alias module:api/NLUDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addData operation.
     * @callback module:api/NLUDataApi~addDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingExample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new training example
     * @param {String} projectId Project ID
     * @param {module:model/TrainingExample} trainingExample 
     * @param {module:api/NLUDataApi~addDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingExample}
     */
    addData(projectId, trainingExample, callback) {
      let postBody = trainingExample;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addData");
      }
      // verify the required parameter 'trainingExample' is set
      if (trainingExample === undefined || trainingExample === null) {
        throw new Error("Missing the required parameter 'trainingExample' when calling addData");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrainingExample;
      return this.apiClient.callApi(
        '/projects/{project_id}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteData operation.
     * @callback module:api/NLUDataApi~deleteDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a training example by id
     * @param {String} projectId Project ID
     * @param {String} exampleId Example ID
     * @param {module:api/NLUDataApi~deleteDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    deleteData(projectId, exampleId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteData");
      }
      // verify the required parameter 'exampleId' is set
      if (exampleId === undefined || exampleId === null) {
        throw new Error("Missing the required parameter 'exampleId' when calling deleteData");
      }

      let pathParams = {
        'project_id': projectId,
        'example_id': exampleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/projects/{project_id}/data/{example_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getData operation.
     * @callback module:api/NLUDataApi~getDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get training examples
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Search string
     * @param {String} opts.intent Intents to filter on
     * @param {Number} opts.limit 
     * @param {Number} opts.offset  (default to 0)
     * @param {Boolean} opts.sorted 
     * @param {module:api/NLUDataApi~getDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    getData(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getData");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'q': opts['q'],
        'intent': opts['intent'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sorted': opts['sorted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/projects/{project_id}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataJson operation.
     * @callback module:api/NLUDataApi~getDataJsonCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download traning examples in JSON format
     * @param {String} projectId Project ID
     * @param {module:api/NLUDataApi~getDataJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getDataJson(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDataJson");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project_id}/data.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataWarnings operation.
     * @callback module:api/NLUDataApi~getDataWarningsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataWarning>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get warnings about training data.
     * @param {String} projectId Project ID
     * @param {module:api/NLUDataApi~getDataWarningsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataWarning>}
     */
    getDataWarnings(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getDataWarnings");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DataWarning];
      return this.apiClient.callApi(
        '/projects/{project_id}/dataWarnings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntities operation.
     * @callback module:api/NLUDataApi~getEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Entity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Available entities
     * Unique entity types present in the training data.
     * @param {String} projectId Project ID
     * @param {module:api/NLUDataApi~getEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Entity>}
     */
    getEntities(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getEntities");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Entity];
      return this.apiClient.callApi(
        '/projects/{project_id}/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBulkData operation.
     * @callback module:api/NLUDataApi~replaceBulkDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace training data in bulk
     * @param {String} projectId Project ID
     * @param {module:model/InlineObject6} inlineObject6 
     * @param {module:api/NLUDataApi~replaceBulkDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    replaceBulkData(projectId, inlineObject6, callback) {
      let postBody = inlineObject6;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling replaceBulkData");
      }
      // verify the required parameter 'inlineObject6' is set
      if (inlineObject6 === undefined || inlineObject6 === null) {
        throw new Error("Missing the required parameter 'inlineObject6' when calling replaceBulkData");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json', 'text/markdown'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/projects/{project_id}/data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExample operation.
     * @callback module:api/NLUDataApi~updateExampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingExample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a training example by id
     * @param {String} projectId Project ID
     * @param {String} exampleId Example ID
     * @param {module:model/TrainingExample} trainingExample 
     * @param {module:api/NLUDataApi~updateExampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingExample}
     */
    updateExample(projectId, exampleId, trainingExample, callback) {
      let postBody = trainingExample;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateExample");
      }
      // verify the required parameter 'exampleId' is set
      if (exampleId === undefined || exampleId === null) {
        throw new Error("Missing the required parameter 'exampleId' when calling updateExample");
      }
      // verify the required parameter 'trainingExample' is set
      if (trainingExample === undefined || trainingExample === null) {
        throw new Error("Missing the required parameter 'trainingExample' when calling updateExample");
      }

      let pathParams = {
        'project_id': projectId,
        'example_id': exampleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrainingExample;
      return this.apiClient.callApi(
        '/projects/{project_id}/data/{example_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExampleById operation.
     * @callback module:api/NLUDataApi~updateExampleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainingExample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a training example by id
     * @param {String} projectId Project ID
     * @param {String} hash MD5 hash of an NLU example's text field
     * @param {module:api/NLUDataApi~updateExampleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainingExample}
     */
    updateExampleById(projectId, hash, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling updateExampleById");
      }
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling updateExampleById");
      }

      let pathParams = {
        'project_id': projectId,
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrainingExample;
      return this.apiClient.callApi(
        '/projects/{project_id}/data/{hash}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
