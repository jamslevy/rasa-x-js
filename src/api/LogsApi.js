/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Suggestion from '../model/Suggestion';

/**
* Logs service.
* @module api/LogsApi
* @version 1.0.0
*/
export default class LogsApi {

    /**
    * Constructs a new LogsApi. 
    * @alias module:api/LogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveLog operation.
     * @callback module:api/LogsApi~archiveLogCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive log
     * @param {String} projectId Project ID
     * @param {String} logId 
     * @param {module:api/LogsApi~archiveLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    archiveLog(projectId, logId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling archiveLog");
      }
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling archiveLog");
      }

      let pathParams = {
        'project_id': projectId,
        'log_id': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/projects/{project_id}/logs/{log_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogByHash operation.
     * @callback module:api/LogsApi~getLogByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Suggestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch log by its hash
     * @param {String} projectId Project ID
     * @param {String} hash MD5 hash of an NLU example's text field
     * @param {module:api/LogsApi~getLogByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Suggestion}
     */
    getLogByHash(projectId, hash, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getLogByHash");
      }
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getLogByHash");
      }

      let pathParams = {
        'project_id': projectId,
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Suggestion;
      return this.apiClient.callApi(
        '/projects/{project_id}/logs/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogs operation.
     * @callback module:api/LogsApi~getLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the logs of the Rasa X service
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken A user's api token
     * @param {module:api/LogsApi~getLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLogs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'api_token': opts['apiToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/zip', 'text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
