/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatToken from '../model/ChatToken';

/**
* ChatToken service.
* @module api/ChatTokenApi
* @version 1.0.0
*/
export default class ChatTokenApi {

    /**
    * Constructs a new ChatTokenApi. 
    * @alias module:api/ChatTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChatToken operation.
     * @callback module:api/ChatTokenApi~getChatTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get chat_token, bot_name and description
     * @param {String} accessToken A user's jwt token
     * @param {module:api/ChatTokenApi~getChatTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatToken}
     */
    getChatToken(accessToken, callback) {
      let postBody = null;
      // verify the required parameter 'accessToken' is set
      if (accessToken === undefined || accessToken === null) {
        throw new Error("Missing the required parameter 'accessToken' when calling getChatToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'access_token': accessToken
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatToken;
      return this.apiClient.callApi(
        '/chatToken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChatToken operation.
     * @callback module:api/ChatTokenApi~updateChatTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bot's name and description for token
     * @param {module:model/ChatToken} chatToken 
     * @param {module:api/ChatTokenApi~updateChatTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatToken}
     */
    updateChatToken(chatToken, callback) {
      let postBody = chatToken;
      // verify the required parameter 'chatToken' is set
      if (chatToken === undefined || chatToken === null) {
        throw new Error("Missing the required parameter 'chatToken' when calling updateChatToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatToken;
      return this.apiClient.callApi(
        '/chatToken', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
