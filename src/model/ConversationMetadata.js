/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConversationMetadata model module.
 * @module model/ConversationMetadata
 * @version 1.0.0
 */
class ConversationMetadata {
    /**
     * Constructs a new <code>ConversationMetadata</code>.
     * @alias module:model/ConversationMetadata
     */
    constructor() { 
        
        ConversationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationMetadata} obj Optional instance to populate.
     * @return {module:model/ConversationMetadata} The populated <code>ConversationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationMetadata();

            if (data.hasOwnProperty('conversation_id')) {
                obj['conversation_id'] = ApiClient.convertToType(data['conversation_id'], 'String');
            }
            if (data.hasOwnProperty('latest_event_time')) {
                obj['latest_event_time'] = ApiClient.convertToType(data['latest_event_time'], 'Number');
            }
            if (data.hasOwnProperty('latest_input_channel')) {
                obj['latest_input_channel'] = ApiClient.convertToType(data['latest_input_channel'], 'String');
            }
            if (data.hasOwnProperty('intents')) {
                obj['intents'] = ApiClient.convertToType(data['intents'], ['String']);
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('minimum_action_confidence')) {
                obj['minimum_action_confidence'] = ApiClient.convertToType(data['minimum_action_confidence'], 'Number');
            }
            if (data.hasOwnProperty('in_training_data')) {
                obj['in_training_data'] = ApiClient.convertToType(data['in_training_data'], 'Boolean');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], ['String']);
            }
            if (data.hasOwnProperty('n_user_messages')) {
                obj['n_user_messages'] = ApiClient.convertToType(data['n_user_messages'], 'Number');
            }
            if (data.hasOwnProperty('flagged_messages')) {
                obj['flagged_messages'] = ApiClient.convertToType(data['flagged_messages'], [Object]);
            }
            if (data.hasOwnProperty('unflagged_messages')) {
                obj['unflagged_messages'] = ApiClient.convertToType(data['unflagged_messages'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * Id of this conversation
 * @member {String} conversation_id
 */
ConversationMetadata.prototype['conversation_id'] = undefined;

/**
 * Timestamp of most recent event (in seconds)
 * @member {Number} latest_event_time
 */
ConversationMetadata.prototype['latest_event_time'] = undefined;

/**
 * Name of the input channel last used
 * @member {String} latest_input_channel
 */
ConversationMetadata.prototype['latest_input_channel'] = undefined;

/**
 * Set of intents in the conversation
 * @member {Array.<String>} intents
 */
ConversationMetadata.prototype['intents'] = undefined;

/**
 * Set of actions in the conversation
 * @member {Array.<String>} actions
 */
ConversationMetadata.prototype['actions'] = undefined;

/**
 * Minimum action confidence in the conversation
 * @member {Number} minimum_action_confidence
 */
ConversationMetadata.prototype['minimum_action_confidence'] = undefined;

/**
 * Whether the entire conversation appear in training data
 * @member {Boolean} in_training_data
 */
ConversationMetadata.prototype['in_training_data'] = undefined;

/**
 * Set of policies used in the action predictions
 * @member {Array.<String>} policies
 */
ConversationMetadata.prototype['policies'] = undefined;

/**
 * Number of user messages in the conversation
 * @member {Number} n_user_messages
 */
ConversationMetadata.prototype['n_user_messages'] = undefined;

/**
 * List of flagged messages
 * @member {Array.<Object>} flagged_messages
 */
ConversationMetadata.prototype['flagged_messages'] = undefined;

/**
 * List of unflagged messages
 * @member {Array.<Object>} unflagged_messages
 */
ConversationMetadata.prototype['unflagged_messages'] = undefined;






export default ConversationMetadata;

