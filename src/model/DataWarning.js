/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OneOfstringobject from './OneOfstringobject';

/**
 * The DataWarning model module.
 * @module model/DataWarning
 * @version 1.0.0
 */
class DataWarning {
    /**
     * Constructs a new <code>DataWarning</code>.
     * A warning tells you there are too few or too many of something. The warning will also return the &#x60;min&#x60; or &#x60;max&#x60; number that is acceptable, and the current count. For example, if you have &lt;2 examples for one of your intents, you will receive a warning about the &#x60;dataPerIntent&#x60; with a &#x60;min&#x60; of 2 and a &#x60;count&#x60; of 1.
     * @alias module:model/DataWarning
     */
    constructor() { 
        
        DataWarning.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataWarning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataWarning} obj Optional instance to populate.
     * @return {module:model/DataWarning} The populated <code>DataWarning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataWarning();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('min')) {
                obj['min'] = ApiClient.convertToType(data['min'], 'Number');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], OneOfstringobject);
            }
        }
        return obj;
    }


}

/**
 * Entity being warned about * `data` - Training data. * `blankIntent` - Training data with blank intent values. * `intent` - Intents to which your training data are classified. * `dataPerIntent` - Training data classified to the intent specified in `meta`. 
 * @member {module:model/DataWarning.TypeEnum} type
 */
DataWarning.prototype['type'] = undefined;

/**
 * Either `min` or `max` will always be present
 * @member {Number} min
 */
DataWarning.prototype['min'] = undefined;

/**
 * Either `min` or `max` will always be present
 * @member {Number} max
 */
DataWarning.prototype['max'] = undefined;

/**
 * @member {Number} count
 */
DataWarning.prototype['count'] = undefined;

/**
 * @member {module:model/OneOfstringobject} meta
 */
DataWarning.prototype['meta'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DataWarning['TypeEnum'] = {

    /**
     * value: "data"
     * @const
     */
    "data": "data",

    /**
     * value: "blankIntent"
     * @const
     */
    "blankIntent": "blankIntent",

    /**
     * value: "intent"
     * @const
     */
    "intent": "intent",

    /**
     * value: "dataPerIntent"
     * @const
     */
    "dataPerIntent": "dataPerIntent"
};



export default DataWarning;

