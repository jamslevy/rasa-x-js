/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionEvent from './ActionEvent';
import BotEvent from './BotEvent';
import ParseData from './ParseData';
import RestartEvent from './RestartEvent';
import UserEvent from './UserEvent';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     * @implements module:model/UserEvent
     * @implements module:model/BotEvent
     * @implements module:model/ActionEvent
     * @implements module:model/RestartEvent
     */
    constructor() { 
        UserEvent.initialize(this);BotEvent.initialize(this);ActionEvent.initialize(this);RestartEvent.initialize(this);
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();
            UserEvent.constructFromObject(data, obj);
            BotEvent.constructFromObject(data, obj);
            ActionEvent.constructFromObject(data, obj);
            RestartEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('parse_data')) {
                obj['parse_data'] = ParseData.constructFromObject(data['parse_data']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('is_flagged')) {
                obj['is_flagged'] = ApiClient.convertToType(data['is_flagged'], 'Boolean');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Event.EventEnum} event
 */
Event.prototype['event'] = undefined;

/**
 * @member {module:model/ParseData} parse_data
 */
Event.prototype['parse_data'] = undefined;

/**
 * @member {String} text
 */
Event.prototype['text'] = undefined;

/**
 * @member {Number} timestamp
 */
Event.prototype['timestamp'] = undefined;

/**
 * True if message was flagged.
 * @member {Boolean} is_flagged
 * @default false
 */
Event.prototype['is_flagged'] = false;

/**
 * @member {Object} data
 */
Event.prototype['data'] = undefined;

/**
 * @member {String} name
 */
Event.prototype['name'] = undefined;


// Implement UserEvent interface:
/**
 * @member {module:model/UserEvent.EventEnum} event
 */
UserEvent.prototype['event'] = undefined;
/**
 * @member {module:model/ParseData} parse_data
 */
UserEvent.prototype['parse_data'] = undefined;
/**
 * @member {String} text
 */
UserEvent.prototype['text'] = undefined;
/**
 * @member {Number} timestamp
 */
UserEvent.prototype['timestamp'] = undefined;
/**
 * True if message was flagged.
 * @member {Boolean} is_flagged
 * @default false
 */
UserEvent.prototype['is_flagged'] = false;
// Implement BotEvent interface:
/**
 * @member {module:model/BotEvent.EventEnum} event
 */
BotEvent.prototype['event'] = undefined;
/**
 * @member {Object} data
 */
BotEvent.prototype['data'] = undefined;
/**
 * @member {String} text
 */
BotEvent.prototype['text'] = undefined;
/**
 * @member {Number} timestamp
 */
BotEvent.prototype['timestamp'] = undefined;
/**
 * True if message was flagged.
 * @member {Boolean} is_flagged
 * @default false
 */
BotEvent.prototype['is_flagged'] = false;
// Implement ActionEvent interface:
/**
 * @member {module:model/ActionEvent.EventEnum} event
 */
ActionEvent.prototype['event'] = undefined;
/**
 * @member {String} name
 */
ActionEvent.prototype['name'] = undefined;
/**
 * @member {Number} timestamp
 */
ActionEvent.prototype['timestamp'] = undefined;
// Implement RestartEvent interface:
/**
 * @member {module:model/RestartEvent.EventEnum} event
 */
RestartEvent.prototype['event'] = undefined;
/**
 * @member {Number} timestamp
 */
RestartEvent.prototype['timestamp'] = undefined;



/**
 * Allowed values for the <code>event</code> property.
 * @enum {String}
 * @readonly
 */
Event['EventEnum'] = {

    /**
     * value: "restart"
     * @const
     */
    "restart": "restart"
};



export default Event;

