/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RasaXHttpApi);
  }
}(this, function(expect, RasaXHttpApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RasaXHttpApi.ConversationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversationsApi', function() {
    describe('correctMessage', function() {
      it('should call correctMessage successfully', function(done) {
        //uncomment below and update the code to test correctMessage
        //instance.correctMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlagFromConversation', function() {
      it('should call deleteFlagFromConversation successfully', function(done) {
        //uncomment below and update the code to test deleteFlagFromConversation
        //instance.deleteFlagFromConversation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadDebugDumpJson', function() {
      it('should call downloadDebugDumpJson successfully', function(done) {
        //uncomment below and update the code to test downloadDebugDumpJson
        //instance.downloadDebugDumpJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadDebugDumpMarkdown', function() {
      it('should call downloadDebugDumpMarkdown successfully', function(done) {
        //uncomment below and update the code to test downloadDebugDumpMarkdown
        //instance.downloadDebugDumpMarkdown(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flagMessage', function() {
      it('should call flagMessage successfully', function(done) {
        //uncomment below and update the code to test flagMessage
        //instance.flagMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConversation', function() {
      it('should call getConversation successfully', function(done) {
        //uncomment below and update the code to test getConversation
        //instance.getConversation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConversations', function() {
      it('should call getConversations successfully', function(done) {
        //uncomment below and update the code to test getConversations
        //instance.getConversations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEvents', function() {
      it('should call getEvents successfully', function(done) {
        //uncomment below and update the code to test getEvents
        //instance.getEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessages', function() {
      it('should call getMessages successfully', function(done) {
        //uncomment below and update the code to test getMessages
        //instance.getMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniqueActions', function() {
      it('should call getUniqueActions successfully', function(done) {
        //uncomment below and update the code to test getUniqueActions
        //instance.getUniqueActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniqueEntities', function() {
      it('should call getUniqueEntities successfully', function(done) {
        //uncomment below and update the code to test getUniqueEntities
        //instance.getUniqueEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniqueIntents', function() {
      it('should call getUniqueIntents successfully', function(done) {
        //uncomment below and update the code to test getUniqueIntents
        //instance.getUniqueIntents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUniquePolicies', function() {
      it('should call getUniquePolicies successfully', function(done) {
        //uncomment below and update the code to test getUniquePolicies
        //instance.getUniquePolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putChat', function() {
      it('should call putChat successfully', function(done) {
        //uncomment below and update the code to test putChat
        //instance.putChat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeMessageCorrection', function() {
      it('should call removeMessageCorrection successfully', function(done) {
        //uncomment below and update the code to test removeMessageCorrection
        //instance.removeMessageCorrection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessage', function() {
      it('should call sendMessage successfully', function(done) {
        //uncomment below and update the code to test sendMessage
        //instance.sendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
