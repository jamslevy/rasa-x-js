/**
 * Rasa X HTTP API
 * This is the Rasa X HTTP API 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RasaXHttpApi);
  }
}(this, function(expect, RasaXHttpApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RasaXHttpApi.ConversationMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversationMetadata', function() {
    it('should create an instance of ConversationMetadata', function() {
      // uncomment below and update the code to test ConversationMetadata
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be.a(RasaXHttpApi.ConversationMetadata);
    });

    it('should have the property conversationId (base name: "conversation_id")', function() {
      // uncomment below and update the code to test the property conversationId
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property latestEventTime (base name: "latest_event_time")', function() {
      // uncomment below and update the code to test the property latestEventTime
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property latestInputChannel (base name: "latest_input_channel")', function() {
      // uncomment below and update the code to test the property latestInputChannel
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property intents (base name: "intents")', function() {
      // uncomment below and update the code to test the property intents
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property actions (base name: "actions")', function() {
      // uncomment below and update the code to test the property actions
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property minimumActionConfidence (base name: "minimum_action_confidence")', function() {
      // uncomment below and update the code to test the property minimumActionConfidence
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property inTrainingData (base name: "in_training_data")', function() {
      // uncomment below and update the code to test the property inTrainingData
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property policies (base name: "policies")', function() {
      // uncomment below and update the code to test the property policies
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property nUserMessages (base name: "n_user_messages")', function() {
      // uncomment below and update the code to test the property nUserMessages
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property flaggedMessages (base name: "flagged_messages")', function() {
      // uncomment below and update the code to test the property flaggedMessages
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

    it('should have the property unflaggedMessages (base name: "unflagged_messages")', function() {
      // uncomment below and update the code to test the property unflaggedMessages
      //var instane = new RasaXHttpApi.ConversationMetadata();
      //expect(instance).to.be();
    });

  });

}));
